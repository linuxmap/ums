// MemoryPool.h: interface for the CMemoryPool class.
//
//////////////////////////////////////////////////////////////////////

#if !defined(AFX_MEMORYPOOL_H__99111ACA_858E_479F_9012_BD7A378F7781__INCLUDED_)
#define AFX_MEMORYPOOL_H__99111ACA_858E_479F_9012_BD7A378F7781__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

#include <singleton.h>
#include "MemoryManage.h"




#define MemoryManageNum	(int)5










/*=============================================================================
类 名:		CMemPolicy
功    能:	策略模式
-------------------------------------------------------------------------------
修改纪录:
日      期  版本    修改人  修改内容
2010/12/17  4.0     沈  钦    创建
=============================================================================*/
class CMemPolicy
{
public:
	CMemPolicy(CTAapater<CMemoryManage> *pManage)
	{
		m_pcManager = pManage;
	}

	virtual ~CMemPolicy()
	{

	}
	/*=============================================================================
	函 数 名:  Find
	功    能:  查找可以使用的内存地址
	参    数:  [in]len 数据大小
	注    意:无
	返 回 值:无
	-------------------------------------------------------------------------------
	修改纪录:
	日      期  版本    修改人  修改内容 
	2010/12/17  4.0     沈  钦    创建
		=============================================================================*/
	virtual CTAapater<CMemoryManage> *Find(int len) = 0;
protected:
	CTAapater<CMemoryManage> *m_pcManager;
};
/*=============================================================================
类 名:		CNormalPolicy
功    能:	从最小的分块开始查找是否可以使用 
-------------------------------------------------------------------------------
修改纪录:
日      期  版本    修改人  修改内容
2010/12/17  4.0     沈  钦    创建
=============================================================================*/
class CNormalPolicy: public CMemPolicy
{
public:
	CNormalPolicy(CTAapater<CMemoryManage> *pManage):CMemPolicy(pManage)
	{
		
	}
	CTAapater<CMemoryManage> *Find(int len);
	
	~CNormalPolicy()
	{

	}
};








#define PolicyNum(num)		num,
#define PolicyDesc(str)
#define _PolicyEnd
enum EmFitPolicy
{
	PolicyNum( emNormalP )
	PolicyDesc("从最小的分块开始查找，剩余容量能满足就分配")
	_PolicyEnd
		
	PolicyNum( emPerfectP )
	PolicyDesc("最佳适应法")
	_PolicyEnd
		
	PolicyNum( emBadP )
	PolicyDesc("最坏适应法")
	_PolicyEnd
		
		
};


/*=============================================================================
类 名:		CPolicyFactory
功    能:	简单工厂模式
-------------------------------------------------------------------------------
修改纪录:
日      期  版本    修改人  修改内容
2010/12/17  4.0     沈  钦    创建
=============================================================================*/
class CPolicyFactory
{
public:
	CPolicyFactory()
	{
		m_pcManager = NULL;
	}
	virtual ~CPolicyFactory()
	{

	}
	/*=============================================================================
	函 数 名:  FindSuitable
	功    能:  根据相应模式查找合适内存块
	参    数:  [in]len数据大小   [in]plc   存放策略
	注    意:无
	返 回 值:无
	-------------------------------------------------------------------------------
	修改纪录:
	日      期  版本    修改人  修改内容 
	2010/12/17  4.0     沈  钦    创建
		=============================================================================*/
	CTAapater<CMemoryManage>	*FindSuitable( int len, EmFitPolicy plc = emNormalP);
	void						SetpManage(CTAapater<CMemoryManage> *p);

protected:

private:
	CTAapater<CMemoryManage>	*m_pcManager;
};





/*=============================================================================
类    名:	CMemoryPool
功    能:	内存池  存放 获取数据
备    注:   内存池内不连续  具体的每个区域是连续的
-------------------------------------------------------------------------------
修改纪录:
日      期  版本    修改人  修改内容
2010/12/17  4.0     沈  钦    创建
=============================================================================*/
class CMemoryPool : public CSingleton<CMemoryPool>
{
public:
	/*=============================================================================
	函 数 名:  InitMemoryPool
	功    能:  初始化内存
	参    数:  维数为MemoryManageNum 的2列的数组 指针  数组内容为 ：  [0]每块大小   [1]块的数量
	注    意:  请把单位内存小的放在数组的前面
	返 回 值:无
	-------------------------------------------------------------------------------
	修改纪录:
	日      期  版本    修改人  修改内容 
	2010/12/17  4.0     沈  钦    创建
		=============================================================================*/
	virtual EmMemoryError	InitMemoryPool( int (*p)[2] );
	/*=============================================================================
	函 数 名:  InitMemoryPool
	功    能:  初始化内存
	参    数:  
	注    意:  
	返 回 值: 
	-------------------------------------------------------------------------------
	修改纪录:
	日      期  版本    修改人  修改内容 
	2010/12/17  4.0     沈  钦    创建
		=============================================================================*/
	virtual EmMemoryError	InitMemoryPool();
	/*=============================================================================
	函 数 名:  GettData
	功    能:  获得数据
	参    数:  [in]pdata 要查找的内容指针    [out]pout 输出内容的指针 [out]len输出长度
	注    意:无
	返 回 值:无
	-------------------------------------------------------------------------------
	修改纪录:
	日      期  版本    修改人  修改内容
	2010/12/17  4.0     沈  钦    创建
		=============================================================================*/
	EmMemoryError			GetData(char *pdata, char *pout, int &len);
	/*=============================================================================
	函 数 名:  InputData
	功    能:  放数据到内存
	参    数:  [in]pdata 数据指针   [in]len 要存入内容的大小     [pout]  要存储的数据在 拷贝后的首地址
	注    意:无
	返 回 值:无
	-------------------------------------------------------------------------------
	修改纪录:
	日      期  版本    修改人  修改内容
	2010/12/17  4.0     沈  钦    创建
		=============================================================================*/
	EmMemoryError			InputData(char *pdata, int len, char **pout);

	
	CMemoryPool();
	virtual					~CMemoryPool();


	void					PrintManageInfo();
public:
	int						m_nDropApplyTimes;
	int						m_nGetFailureTime;
protected:
	void					Init();
	/*=============================================================================
	函 数 名:  FindSuitable
	功    能:  根据相应模式查找合适内存块
	参    数:  [in]len 数据大小
	注    意:无
	返 回 值:无
	-------------------------------------------------------------------------------
	修改纪录:
	日      期  版本    修改人  修改内容 
	2010/12/17  4.0     沈  钦    创建
		=============================================================================*/
	CTAapater<CMemoryManage>			*FindSuitable( int len);
private:
	CPolicyFactory						m_cMangePlc;
	CTAapater<CMemoryManage>			m_acMemManage[MemoryManageNum];//
	TBlockBorder						m_atBlockBorder[MemoryManageNum];//每个分配区域的起始位置 结束为止
};









#endif // !defined(AFX_MEMORYPOOL_H__99111ACA_858E_479F_9012_BD7A378F7781__INCLUDED_)
