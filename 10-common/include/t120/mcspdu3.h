//
// mcspduv3.h
//
// Code automatically generated by asnparse.
//

#if ! H323_DISABLE_MCS_PROTOCOL_3

#ifndef __MCS_PROTOCOL_3_H
#define __MCS_PROTOCOL_3_H

#ifdef P_USE_PRAGMA
#pragma interface
#endif

#include <ptclib/asner.h>

//
// H221NonStandardIdentifier
//

class MCS_PROTOCOL_3_H221NonStandardIdentifier : public PASN_OctetString
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_H221NonStandardIdentifier, PASN_OctetString);
#endif
  public:
    MCS_PROTOCOL_3_H221NonStandardIdentifier(unsigned tag = UniversalOctetString, TagClass tagClass = UniversalTagClass);

    MCS_PROTOCOL_3_H221NonStandardIdentifier(const char * v);
    MCS_PROTOCOL_3_H221NonStandardIdentifier(const PString & v);
    MCS_PROTOCOL_3_H221NonStandardIdentifier(const PBYTEArray & v);

    MCS_PROTOCOL_3_H221NonStandardIdentifier & operator=(const char * v);
    MCS_PROTOCOL_3_H221NonStandardIdentifier & operator=(const PString & v);
    MCS_PROTOCOL_3_H221NonStandardIdentifier & operator=(const PBYTEArray & v);
    PObject * Clone() const;
};


//
// Key
//

class MCS_PROTOCOL_3_H221NonStandardIdentifier;

class MCS_PROTOCOL_3_Key : public PASN_Choice
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_Key, PASN_Choice);
#endif
  public:
    MCS_PROTOCOL_3_Key(unsigned tag = 0, TagClass tagClass = UniversalTagClass);

    enum Choices {
      e_object,
      e_h221NonStandard
    };

#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_H221NonStandardIdentifier &() const;
#else
    operator MCS_PROTOCOL_3_H221NonStandardIdentifier &();
    operator const MCS_PROTOCOL_3_H221NonStandardIdentifier &() const;
#endif

    BOOL CreateObject();
    PObject * Clone() const;
};


//
// NonStandardParameter
//

class MCS_PROTOCOL_3_NonStandardParameter : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_NonStandardParameter, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_NonStandardParameter(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    MCS_PROTOCOL_3_Key m_key;
    PASN_OctetString m_data;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// ChannelId
//

class MCS_PROTOCOL_3_ChannelId : public PASN_Integer
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_ChannelId, PASN_Integer);
#endif
  public:
    MCS_PROTOCOL_3_ChannelId(unsigned tag = UniversalInteger, TagClass tagClass = UniversalTagClass);

    MCS_PROTOCOL_3_ChannelId & operator=(int v);
    MCS_PROTOCOL_3_ChannelId & operator=(unsigned v);
    PObject * Clone() const;
};


//
// StaticChannelId
//

class MCS_PROTOCOL_3_StaticChannelId : public PASN_Integer
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_StaticChannelId, PASN_Integer);
#endif
  public:
    MCS_PROTOCOL_3_StaticChannelId(unsigned tag = UniversalInteger, TagClass tagClass = UniversalTagClass);

    MCS_PROTOCOL_3_StaticChannelId & operator=(int v);
    MCS_PROTOCOL_3_StaticChannelId & operator=(unsigned v);
    PObject * Clone() const;
};


//
// DynamicChannelId
//

class MCS_PROTOCOL_3_DynamicChannelId : public PASN_Integer
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_DynamicChannelId, PASN_Integer);
#endif
  public:
    MCS_PROTOCOL_3_DynamicChannelId(unsigned tag = UniversalInteger, TagClass tagClass = UniversalTagClass);

    MCS_PROTOCOL_3_DynamicChannelId & operator=(int v);
    MCS_PROTOCOL_3_DynamicChannelId & operator=(unsigned v);
    PObject * Clone() const;
};


//
// UserId
//

class MCS_PROTOCOL_3_UserId : public MCS_PROTOCOL_3_DynamicChannelId
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_UserId, MCS_PROTOCOL_3_DynamicChannelId);
#endif
  public:
    MCS_PROTOCOL_3_UserId(unsigned tag = UniversalInteger, TagClass tagClass = UniversalTagClass);

    MCS_PROTOCOL_3_UserId & operator=(int v);
    MCS_PROTOCOL_3_UserId & operator=(unsigned v);
    PObject * Clone() const;
};


//
// PrivateChannelId
//

class MCS_PROTOCOL_3_PrivateChannelId : public MCS_PROTOCOL_3_DynamicChannelId
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_PrivateChannelId, MCS_PROTOCOL_3_DynamicChannelId);
#endif
  public:
    MCS_PROTOCOL_3_PrivateChannelId(unsigned tag = UniversalInteger, TagClass tagClass = UniversalTagClass);

    MCS_PROTOCOL_3_PrivateChannelId & operator=(int v);
    MCS_PROTOCOL_3_PrivateChannelId & operator=(unsigned v);
    PObject * Clone() const;
};


//
// AssignedChannelId
//

class MCS_PROTOCOL_3_AssignedChannelId : public MCS_PROTOCOL_3_DynamicChannelId
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_AssignedChannelId, MCS_PROTOCOL_3_DynamicChannelId);
#endif
  public:
    MCS_PROTOCOL_3_AssignedChannelId(unsigned tag = UniversalInteger, TagClass tagClass = UniversalTagClass);

    MCS_PROTOCOL_3_AssignedChannelId & operator=(int v);
    MCS_PROTOCOL_3_AssignedChannelId & operator=(unsigned v);
    PObject * Clone() const;
};


//
// TokenId
//

class MCS_PROTOCOL_3_TokenId : public PASN_Integer
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_TokenId, PASN_Integer);
#endif
  public:
    MCS_PROTOCOL_3_TokenId(unsigned tag = UniversalInteger, TagClass tagClass = UniversalTagClass);

    MCS_PROTOCOL_3_TokenId & operator=(int v);
    MCS_PROTOCOL_3_TokenId & operator=(unsigned v);
    PObject * Clone() const;
};


//
// TokenStatus
//

class MCS_PROTOCOL_3_TokenStatus : public PASN_Choice
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_TokenStatus, PASN_Choice);
#endif
  public:
    MCS_PROTOCOL_3_TokenStatus(unsigned tag = 0, TagClass tagClass = UniversalTagClass);

    enum Choices {
      e_notInUse,
      e_selfGrabbed,
      e_otherGrabbed,
      e_selfInhibited,
      e_otherInhibited,
      e_selfRecipient,
      e_selfGiving,
      e_otherGiving
    };

    BOOL CreateObject();
    PObject * Clone() const;
};


//
// DataPriority
//

class MCS_PROTOCOL_3_DataPriority : public PASN_Choice
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_DataPriority, PASN_Choice);
#endif
  public:
    MCS_PROTOCOL_3_DataPriority(unsigned tag = 0, TagClass tagClass = UniversalTagClass);

    enum Choices {
      e_top,
      e_high,
      e_medium,
      e_low
    };

    BOOL CreateObject();
    PObject * Clone() const;
};


//
// Segmentation
//

class MCS_PROTOCOL_3_Segmentation : public PASN_BitString
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_Segmentation, PASN_BitString);
#endif
  public:
    MCS_PROTOCOL_3_Segmentation(unsigned tag = UniversalBitString, TagClass tagClass = UniversalTagClass);

    PObject * Clone() const;
};


//
// ChannelAttributes
//

class MCS_PROTOCOL_3_ChannelAttributes_static;
class MCS_PROTOCOL_3_ChannelAttributes_userId;
class MCS_PROTOCOL_3_ChannelAttributes_private;
class MCS_PROTOCOL_3_ChannelAttributes_assigned;

class MCS_PROTOCOL_3_ChannelAttributes : public PASN_Choice
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_ChannelAttributes, PASN_Choice);
#endif
  public:
    MCS_PROTOCOL_3_ChannelAttributes(unsigned tag = 0, TagClass tagClass = UniversalTagClass);

    enum Choices {
      e_static,
      e_userId,
      e_private,
      e_assigned
    };

#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_ChannelAttributes_static &() const;
#else
    operator MCS_PROTOCOL_3_ChannelAttributes_static &();
    operator const MCS_PROTOCOL_3_ChannelAttributes_static &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_ChannelAttributes_userId &() const;
#else
    operator MCS_PROTOCOL_3_ChannelAttributes_userId &();
    operator const MCS_PROTOCOL_3_ChannelAttributes_userId &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_ChannelAttributes_private &() const;
#else
    operator MCS_PROTOCOL_3_ChannelAttributes_private &();
    operator const MCS_PROTOCOL_3_ChannelAttributes_private &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_ChannelAttributes_assigned &() const;
#else
    operator MCS_PROTOCOL_3_ChannelAttributes_assigned &();
    operator const MCS_PROTOCOL_3_ChannelAttributes_assigned &() const;
#endif

    BOOL CreateObject();
    PObject * Clone() const;
};


//
// TokenAttributes
//

class MCS_PROTOCOL_3_TokenAttributes_grabbed;
class MCS_PROTOCOL_3_TokenAttributes_inhibited;
class MCS_PROTOCOL_3_TokenAttributes_giving;
class MCS_PROTOCOL_3_TokenAttributes_ungivable;
class MCS_PROTOCOL_3_TokenAttributes_given;

class MCS_PROTOCOL_3_TokenAttributes : public PASN_Choice
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_TokenAttributes, PASN_Choice);
#endif
  public:
    MCS_PROTOCOL_3_TokenAttributes(unsigned tag = 0, TagClass tagClass = UniversalTagClass);

    enum Choices {
      e_grabbed,
      e_inhibited,
      e_giving,
      e_ungivable,
      e_given
    };

#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_TokenAttributes_grabbed &() const;
#else
    operator MCS_PROTOCOL_3_TokenAttributes_grabbed &();
    operator const MCS_PROTOCOL_3_TokenAttributes_grabbed &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_TokenAttributes_inhibited &() const;
#else
    operator MCS_PROTOCOL_3_TokenAttributes_inhibited &();
    operator const MCS_PROTOCOL_3_TokenAttributes_inhibited &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_TokenAttributes_giving &() const;
#else
    operator MCS_PROTOCOL_3_TokenAttributes_giving &();
    operator const MCS_PROTOCOL_3_TokenAttributes_giving &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_TokenAttributes_ungivable &() const;
#else
    operator MCS_PROTOCOL_3_TokenAttributes_ungivable &();
    operator const MCS_PROTOCOL_3_TokenAttributes_ungivable &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_TokenAttributes_given &() const;
#else
    operator MCS_PROTOCOL_3_TokenAttributes_given &();
    operator const MCS_PROTOCOL_3_TokenAttributes_given &() const;
#endif

    BOOL CreateObject();
    PObject * Clone() const;
};


//
// CapabilityID
//

class MCS_PROTOCOL_3_Key;

class MCS_PROTOCOL_3_CapabilityID : public PASN_Choice
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_CapabilityID, PASN_Choice);
#endif
  public:
    MCS_PROTOCOL_3_CapabilityID(unsigned tag = 0, TagClass tagClass = UniversalTagClass);

    enum Choices {
      e_standardID,
      e_nonstandardID
    };

#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_Key &() const;
#else
    operator MCS_PROTOCOL_3_Key &();
    operator const MCS_PROTOCOL_3_Key &() const;
#endif

    BOOL CreateObject();
    PObject * Clone() const;
};


//
// CapabilityClass
//

class MCS_PROTOCOL_3_CapabilityClass : public PASN_Choice
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_CapabilityClass, PASN_Choice);
#endif
  public:
    MCS_PROTOCOL_3_CapabilityClass(unsigned tag = 0, TagClass tagClass = UniversalTagClass);

    enum Choices {
      e_null,
      e_unsignedMin,
      e_unsignedMax
    };

    BOOL CreateObject();
    PObject * Clone() const;
};


//
// ParticipationIndicator
//

class MCS_PROTOCOL_3_ParticipationIndicator : public PASN_Choice
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_ParticipationIndicator, PASN_Choice);
#endif
  public:
    MCS_PROTOCOL_3_ParticipationIndicator(unsigned tag = 0, TagClass tagClass = UniversalTagClass);

    enum Choices {
      e_global,
      e_partial
    };

    BOOL CreateObject();
    PObject * Clone() const;
};


//
// SeqOfRequestCapabilities
//

class MCS_PROTOCOL_3_RequestCapability;

class MCS_PROTOCOL_3_SeqOfRequestCapabilities : public PASN_Array
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_SeqOfRequestCapabilities, PASN_Array);
#endif
  public:
    MCS_PROTOCOL_3_SeqOfRequestCapabilities(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    PASN_Object * CreateObject() const;
    MCS_PROTOCOL_3_RequestCapability & operator[](PINDEX i) const;
    PObject * Clone() const;
};


//
// SeqOfIndicationCapabilities
//

class MCS_PROTOCOL_3_IndicationCapability;

class MCS_PROTOCOL_3_SeqOfIndicationCapabilities : public PASN_Array
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_SeqOfIndicationCapabilities, PASN_Array);
#endif
  public:
    MCS_PROTOCOL_3_SeqOfIndicationCapabilities(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    PASN_Object * CreateObject() const;
    MCS_PROTOCOL_3_IndicationCapability & operator[](PINDEX i) const;
    PObject * Clone() const;
};


//
// Reason
//

class MCS_PROTOCOL_3_Reason : public PASN_Choice
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_Reason, PASN_Choice);
#endif
  public:
    MCS_PROTOCOL_3_Reason(unsigned tag = 0, TagClass tagClass = UniversalTagClass);

    enum Choices {
      e_rn_domain_disconnected,
      e_rn_provider_initiated,
      e_rn_token_purged,
      e_rn_user_requested,
      e_rn_channel_purged
    };

    BOOL CreateObject();
    PObject * Clone() const;
};


//
// Result
//

class MCS_PROTOCOL_3_Result : public PASN_Choice
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_Result, PASN_Choice);
#endif
  public:
    MCS_PROTOCOL_3_Result(unsigned tag = 0, TagClass tagClass = UniversalTagClass);

    enum Choices {
      e_rt_successful,
      e_rt_domain_merging,
      e_rt_domain_not_hierarchical,
      e_rt_no_such_channel,
      e_rt_no_such_domain,
      e_rt_no_such_user,
      e_rt_not_admitted,
      e_rt_other_user_id,
      e_rt_parameters_unacceptable,
      e_rt_token_not_available,
      e_rt_token_not_possessed,
      e_rt_too_many_channels,
      e_rt_too_many_tokens,
      e_rt_too_many_users,
      e_rt_unspecified_failure,
      e_rt_user_rejected
    };

    BOOL CreateObject();
    PObject * Clone() const;
};


//
// Diagnostic
//

class MCS_PROTOCOL_3_Diagnostic : public PASN_Choice
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_Diagnostic, PASN_Choice);
#endif
  public:
    MCS_PROTOCOL_3_Diagnostic(unsigned tag = 0, TagClass tagClass = UniversalTagClass);

    enum Choices {
      e_dc_inconsistent_merge,
      e_dc_forbidden_PDU_downward,
      e_dc_forbidden_PDU_upward,
      e_dc_invalid_BER_encoding,
      e_dc_invalid_PER_encoding,
      e_dc_misrouted_user,
      e_dc_unrequested_confirm,
      e_dc_wrong_transport_priority,
      e_dc_channel_id_conflict,
      e_dc_token_id_conflict,
      e_dc_not_user_id_channel,
      e_dc_too_many_channels,
      e_dc_too_many_tokens,
      e_dc_too_many_users
    };

    BOOL CreateObject();
    PObject * Clone() const;
};


//
// NonStandardPDU
//

class MCS_PROTOCOL_3_NonStandardPDU : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_NonStandardPDU, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_NonStandardPDU(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    MCS_PROTOCOL_3_NonStandardParameter m_data;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// ExtendedParameterMCSPDU
//

class MCS_PROTOCOL_3_ExtendedParameterPropose;
class MCS_PROTOCOL_3_ExtendedParameterAccept;
class MCS_PROTOCOL_3_NonStandardPDU;

class MCS_PROTOCOL_3_ExtendedParameterMCSPDU : public PASN_Choice
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_ExtendedParameterMCSPDU, PASN_Choice);
#endif
  public:
    MCS_PROTOCOL_3_ExtendedParameterMCSPDU(unsigned tag = 0, TagClass tagClass = UniversalTagClass);

    enum Choices {
      e_extendedParameterPropose,
      e_extendedParameterAccept,
      e_nonStandard
    };

#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_ExtendedParameterPropose &() const;
#else
    operator MCS_PROTOCOL_3_ExtendedParameterPropose &();
    operator const MCS_PROTOCOL_3_ExtendedParameterPropose &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_ExtendedParameterAccept &() const;
#else
    operator MCS_PROTOCOL_3_ExtendedParameterAccept &();
    operator const MCS_PROTOCOL_3_ExtendedParameterAccept &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_NonStandardPDU &() const;
#else
    operator MCS_PROTOCOL_3_NonStandardPDU &();
    operator const MCS_PROTOCOL_3_NonStandardPDU &() const;
#endif

    BOOL CreateObject();
    PObject * Clone() const;
};


//
// DomainMCSPDU
//

class MCS_PROTOCOL_3_PlumbDomainIndication;
class MCS_PROTOCOL_3_ErectDomainRequest;
class MCS_PROTOCOL_3_MergeChannelsRequest;
class MCS_PROTOCOL_3_MergeChannelsConfirm;
class MCS_PROTOCOL_3_PurgeChannelsIndication;
class MCS_PROTOCOL_3_MergeTokensRequest;
class MCS_PROTOCOL_3_MergeTokensConfirm;
class MCS_PROTOCOL_3_PurgeTokensIndication;
class MCS_PROTOCOL_3_DisconnectProviderUltimatum;
class MCS_PROTOCOL_3_RejectMCSPDUUltimatum;
class MCS_PROTOCOL_3_AttachUserRequest;
class MCS_PROTOCOL_3_AttachUserConfirm;
class MCS_PROTOCOL_3_DetachUserRequest;
class MCS_PROTOCOL_3_DetachUserIndication;
class MCS_PROTOCOL_3_ChannelJoinRequest;
class MCS_PROTOCOL_3_ChannelJoinConfirm;
class MCS_PROTOCOL_3_ChannelLeaveRequest;
class MCS_PROTOCOL_3_ChannelConveneRequest;
class MCS_PROTOCOL_3_ChannelConveneConfirm;
class MCS_PROTOCOL_3_ChannelDisbandRequest;
class MCS_PROTOCOL_3_ChannelDisbandIndication;
class MCS_PROTOCOL_3_ChannelAdmitRequest;
class MCS_PROTOCOL_3_ChannelAdmitIndication;
class MCS_PROTOCOL_3_ChannelExpelRequest;
class MCS_PROTOCOL_3_ChannelExpelIndication;
class MCS_PROTOCOL_3_SendDataRequest;
class MCS_PROTOCOL_3_SendDataIndication;
class MCS_PROTOCOL_3_UniformSendDataRequest;
class MCS_PROTOCOL_3_UniformSendDataIndication;
class MCS_PROTOCOL_3_TokenGrabRequest;
class MCS_PROTOCOL_3_TokenGrabConfirm;
class MCS_PROTOCOL_3_TokenInhibitRequest;
class MCS_PROTOCOL_3_TokenInhibitConfirm;
class MCS_PROTOCOL_3_TokenGiveRequest;
class MCS_PROTOCOL_3_TokenGiveIndication;
class MCS_PROTOCOL_3_TokenGiveResponse;
class MCS_PROTOCOL_3_TokenGiveConfirm;
class MCS_PROTOCOL_3_TokenPleaseRequest;
class MCS_PROTOCOL_3_TokenPleaseIndication;
class MCS_PROTOCOL_3_TokenReleaseRequest;
class MCS_PROTOCOL_3_TokenReleaseConfirm;
class MCS_PROTOCOL_3_TokenTestRequest;
class MCS_PROTOCOL_3_TokenTestConfirm;
class MCS_PROTOCOL_3_NonStandardPDU;

class MCS_PROTOCOL_3_DomainMCSPDU : public PASN_Choice
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_DomainMCSPDU, PASN_Choice);
#endif
  public:
    MCS_PROTOCOL_3_DomainMCSPDU(unsigned tag = 0, TagClass tagClass = UniversalTagClass);

    enum Choices {
      e_plumbDomainIndication,
      e_erectDomainRequest,
      e_mergeChannelsRequest,
      e_mergeChannelsConfirm,
      e_purgeChannelsIndication,
      e_mergeTokensRequest,
      e_mergeTokensConfirm,
      e_purgeTokensIndication,
      e_disconnectProviderUltimatum,
      e_rejectMCSPDUUltimatum,
      e_attachUserRequest,
      e_attachUserConfirm,
      e_detachUserRequest,
      e_detachUserIndication,
      e_channelJoinRequest,
      e_channelJoinConfirm,
      e_channelLeaveRequest,
      e_channelConveneRequest,
      e_channelConveneConfirm,
      e_channelDisbandRequest,
      e_channelDisbandIndication,
      e_channelAdmitRequest,
      e_channelAdmitIndication,
      e_channelExpelRequest,
      e_channelExpelIndication,
      e_sendDataRequest,
      e_sendDataIndication,
      e_uniformSendDataRequest,
      e_uniformSendDataIndication,
      e_tokenGrabRequest,
      e_tokenGrabConfirm,
      e_tokenInhibitRequest,
      e_tokenInhibitConfirm,
      e_tokenGiveRequest,
      e_tokenGiveIndication,
      e_tokenGiveResponse,
      e_tokenGiveConfirm,
      e_tokenPleaseRequest,
      e_tokenPleaseIndication,
      e_tokenReleaseRequest,
      e_tokenReleaseConfirm,
      e_tokenTestRequest,
      e_tokenTestConfirm,
      e_nonStandard
    };

#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_PlumbDomainIndication &() const;
#else
    operator MCS_PROTOCOL_3_PlumbDomainIndication &();
    operator const MCS_PROTOCOL_3_PlumbDomainIndication &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_ErectDomainRequest &() const;
#else
    operator MCS_PROTOCOL_3_ErectDomainRequest &();
    operator const MCS_PROTOCOL_3_ErectDomainRequest &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_MergeChannelsRequest &() const;
#else
    operator MCS_PROTOCOL_3_MergeChannelsRequest &();
    operator const MCS_PROTOCOL_3_MergeChannelsRequest &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_MergeChannelsConfirm &() const;
#else
    operator MCS_PROTOCOL_3_MergeChannelsConfirm &();
    operator const MCS_PROTOCOL_3_MergeChannelsConfirm &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_PurgeChannelsIndication &() const;
#else
    operator MCS_PROTOCOL_3_PurgeChannelsIndication &();
    operator const MCS_PROTOCOL_3_PurgeChannelsIndication &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_MergeTokensRequest &() const;
#else
    operator MCS_PROTOCOL_3_MergeTokensRequest &();
    operator const MCS_PROTOCOL_3_MergeTokensRequest &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_MergeTokensConfirm &() const;
#else
    operator MCS_PROTOCOL_3_MergeTokensConfirm &();
    operator const MCS_PROTOCOL_3_MergeTokensConfirm &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_PurgeTokensIndication &() const;
#else
    operator MCS_PROTOCOL_3_PurgeTokensIndication &();
    operator const MCS_PROTOCOL_3_PurgeTokensIndication &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_DisconnectProviderUltimatum &() const;
#else
    operator MCS_PROTOCOL_3_DisconnectProviderUltimatum &();
    operator const MCS_PROTOCOL_3_DisconnectProviderUltimatum &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_RejectMCSPDUUltimatum &() const;
#else
    operator MCS_PROTOCOL_3_RejectMCSPDUUltimatum &();
    operator const MCS_PROTOCOL_3_RejectMCSPDUUltimatum &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_AttachUserRequest &() const;
#else
    operator MCS_PROTOCOL_3_AttachUserRequest &();
    operator const MCS_PROTOCOL_3_AttachUserRequest &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_AttachUserConfirm &() const;
#else
    operator MCS_PROTOCOL_3_AttachUserConfirm &();
    operator const MCS_PROTOCOL_3_AttachUserConfirm &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_DetachUserRequest &() const;
#else
    operator MCS_PROTOCOL_3_DetachUserRequest &();
    operator const MCS_PROTOCOL_3_DetachUserRequest &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_DetachUserIndication &() const;
#else
    operator MCS_PROTOCOL_3_DetachUserIndication &();
    operator const MCS_PROTOCOL_3_DetachUserIndication &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_ChannelJoinRequest &() const;
#else
    operator MCS_PROTOCOL_3_ChannelJoinRequest &();
    operator const MCS_PROTOCOL_3_ChannelJoinRequest &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_ChannelJoinConfirm &() const;
#else
    operator MCS_PROTOCOL_3_ChannelJoinConfirm &();
    operator const MCS_PROTOCOL_3_ChannelJoinConfirm &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_ChannelLeaveRequest &() const;
#else
    operator MCS_PROTOCOL_3_ChannelLeaveRequest &();
    operator const MCS_PROTOCOL_3_ChannelLeaveRequest &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_ChannelConveneRequest &() const;
#else
    operator MCS_PROTOCOL_3_ChannelConveneRequest &();
    operator const MCS_PROTOCOL_3_ChannelConveneRequest &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_ChannelConveneConfirm &() const;
#else
    operator MCS_PROTOCOL_3_ChannelConveneConfirm &();
    operator const MCS_PROTOCOL_3_ChannelConveneConfirm &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_ChannelDisbandRequest &() const;
#else
    operator MCS_PROTOCOL_3_ChannelDisbandRequest &();
    operator const MCS_PROTOCOL_3_ChannelDisbandRequest &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_ChannelDisbandIndication &() const;
#else
    operator MCS_PROTOCOL_3_ChannelDisbandIndication &();
    operator const MCS_PROTOCOL_3_ChannelDisbandIndication &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_ChannelAdmitRequest &() const;
#else
    operator MCS_PROTOCOL_3_ChannelAdmitRequest &();
    operator const MCS_PROTOCOL_3_ChannelAdmitRequest &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_ChannelAdmitIndication &() const;
#else
    operator MCS_PROTOCOL_3_ChannelAdmitIndication &();
    operator const MCS_PROTOCOL_3_ChannelAdmitIndication &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_ChannelExpelRequest &() const;
#else
    operator MCS_PROTOCOL_3_ChannelExpelRequest &();
    operator const MCS_PROTOCOL_3_ChannelExpelRequest &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_ChannelExpelIndication &() const;
#else
    operator MCS_PROTOCOL_3_ChannelExpelIndication &();
    operator const MCS_PROTOCOL_3_ChannelExpelIndication &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_SendDataRequest &() const;
#else
    operator MCS_PROTOCOL_3_SendDataRequest &();
    operator const MCS_PROTOCOL_3_SendDataRequest &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_SendDataIndication &() const;
#else
    operator MCS_PROTOCOL_3_SendDataIndication &();
    operator const MCS_PROTOCOL_3_SendDataIndication &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_UniformSendDataRequest &() const;
#else
    operator MCS_PROTOCOL_3_UniformSendDataRequest &();
    operator const MCS_PROTOCOL_3_UniformSendDataRequest &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_UniformSendDataIndication &() const;
#else
    operator MCS_PROTOCOL_3_UniformSendDataIndication &();
    operator const MCS_PROTOCOL_3_UniformSendDataIndication &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_TokenGrabRequest &() const;
#else
    operator MCS_PROTOCOL_3_TokenGrabRequest &();
    operator const MCS_PROTOCOL_3_TokenGrabRequest &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_TokenGrabConfirm &() const;
#else
    operator MCS_PROTOCOL_3_TokenGrabConfirm &();
    operator const MCS_PROTOCOL_3_TokenGrabConfirm &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_TokenInhibitRequest &() const;
#else
    operator MCS_PROTOCOL_3_TokenInhibitRequest &();
    operator const MCS_PROTOCOL_3_TokenInhibitRequest &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_TokenInhibitConfirm &() const;
#else
    operator MCS_PROTOCOL_3_TokenInhibitConfirm &();
    operator const MCS_PROTOCOL_3_TokenInhibitConfirm &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_TokenGiveRequest &() const;
#else
    operator MCS_PROTOCOL_3_TokenGiveRequest &();
    operator const MCS_PROTOCOL_3_TokenGiveRequest &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_TokenGiveIndication &() const;
#else
    operator MCS_PROTOCOL_3_TokenGiveIndication &();
    operator const MCS_PROTOCOL_3_TokenGiveIndication &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_TokenGiveResponse &() const;
#else
    operator MCS_PROTOCOL_3_TokenGiveResponse &();
    operator const MCS_PROTOCOL_3_TokenGiveResponse &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_TokenGiveConfirm &() const;
#else
    operator MCS_PROTOCOL_3_TokenGiveConfirm &();
    operator const MCS_PROTOCOL_3_TokenGiveConfirm &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_TokenPleaseRequest &() const;
#else
    operator MCS_PROTOCOL_3_TokenPleaseRequest &();
    operator const MCS_PROTOCOL_3_TokenPleaseRequest &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_TokenPleaseIndication &() const;
#else
    operator MCS_PROTOCOL_3_TokenPleaseIndication &();
    operator const MCS_PROTOCOL_3_TokenPleaseIndication &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_TokenReleaseRequest &() const;
#else
    operator MCS_PROTOCOL_3_TokenReleaseRequest &();
    operator const MCS_PROTOCOL_3_TokenReleaseRequest &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_TokenReleaseConfirm &() const;
#else
    operator MCS_PROTOCOL_3_TokenReleaseConfirm &();
    operator const MCS_PROTOCOL_3_TokenReleaseConfirm &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_TokenTestRequest &() const;
#else
    operator MCS_PROTOCOL_3_TokenTestRequest &();
    operator const MCS_PROTOCOL_3_TokenTestRequest &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_TokenTestConfirm &() const;
#else
    operator MCS_PROTOCOL_3_TokenTestConfirm &();
    operator const MCS_PROTOCOL_3_TokenTestConfirm &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator MCS_PROTOCOL_3_NonStandardPDU &() const;
#else
    operator MCS_PROTOCOL_3_NonStandardPDU &();
    operator const MCS_PROTOCOL_3_NonStandardPDU &() const;
#endif

    BOOL CreateObject();
    PObject * Clone() const;
};


//
// ArrayOf_NonStandardParameter
//

class MCS_PROTOCOL_3_NonStandardParameter;

class MCS_PROTOCOL_3_ArrayOf_NonStandardParameter : public PASN_Array
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_ArrayOf_NonStandardParameter, PASN_Array);
#endif
  public:
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    PASN_Object * CreateObject() const;
    MCS_PROTOCOL_3_NonStandardParameter & operator[](PINDEX i) const;
    PObject * Clone() const;
};


//
// ChannelAttributes_static
//

class MCS_PROTOCOL_3_ChannelAttributes_static : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_ChannelAttributes_static, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_ChannelAttributes_static(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_StaticChannelId m_channelId;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// ChannelAttributes_userId
//

class MCS_PROTOCOL_3_ChannelAttributes_userId : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_ChannelAttributes_userId, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_ChannelAttributes_userId(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    PASN_Boolean m_joined;
    MCS_PROTOCOL_3_UserId m_userId;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// ChannelAttributes_assigned
//

class MCS_PROTOCOL_3_ChannelAttributes_assigned : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_ChannelAttributes_assigned, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_ChannelAttributes_assigned(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_AssignedChannelId m_channelId;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// ArrayOf_ChannelAttributes
//

class MCS_PROTOCOL_3_ChannelAttributes;

class MCS_PROTOCOL_3_ArrayOf_ChannelAttributes : public PASN_Array
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_ArrayOf_ChannelAttributes, PASN_Array);
#endif
  public:
    MCS_PROTOCOL_3_ArrayOf_ChannelAttributes(unsigned tag = UniversalSet, TagClass tagClass = UniversalTagClass);

    PASN_Object * CreateObject() const;
    MCS_PROTOCOL_3_ChannelAttributes & operator[](PINDEX i) const;
    PObject * Clone() const;
};


//
// ArrayOf_ChannelId
//

class MCS_PROTOCOL_3_ChannelId;

class MCS_PROTOCOL_3_ArrayOf_ChannelId : public PASN_Array
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_ArrayOf_ChannelId, PASN_Array);
#endif
  public:
    MCS_PROTOCOL_3_ArrayOf_ChannelId(unsigned tag = UniversalSet, TagClass tagClass = UniversalTagClass);

    PASN_Object * CreateObject() const;
    MCS_PROTOCOL_3_ChannelId & operator[](PINDEX i) const;
    PObject * Clone() const;
};


//
// TokenAttributes_grabbed
//

class MCS_PROTOCOL_3_TokenAttributes_grabbed : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_TokenAttributes_grabbed, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_TokenAttributes_grabbed(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_TokenId m_tokenId;
    MCS_PROTOCOL_3_UserId m_grabber;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// TokenAttributes_giving
//

class MCS_PROTOCOL_3_TokenAttributes_giving : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_TokenAttributes_giving, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_TokenAttributes_giving(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_TokenId m_tokenId;
    MCS_PROTOCOL_3_UserId m_grabber;
    MCS_PROTOCOL_3_UserId m_recipient;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// TokenAttributes_ungivable
//

class MCS_PROTOCOL_3_TokenAttributes_ungivable : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_TokenAttributes_ungivable, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_TokenAttributes_ungivable(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_TokenId m_tokenId;
    MCS_PROTOCOL_3_UserId m_grabber;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// TokenAttributes_given
//

class MCS_PROTOCOL_3_TokenAttributes_given : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_TokenAttributes_given, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_TokenAttributes_given(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_TokenId m_tokenId;
    MCS_PROTOCOL_3_UserId m_recipient;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// ArrayOf_TokenAttributes
//

class MCS_PROTOCOL_3_TokenAttributes;

class MCS_PROTOCOL_3_ArrayOf_TokenAttributes : public PASN_Array
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_ArrayOf_TokenAttributes, PASN_Array);
#endif
  public:
    MCS_PROTOCOL_3_ArrayOf_TokenAttributes(unsigned tag = UniversalSet, TagClass tagClass = UniversalTagClass);

    PASN_Object * CreateObject() const;
    MCS_PROTOCOL_3_TokenAttributes & operator[](PINDEX i) const;
    PObject * Clone() const;
};


//
// ArrayOf_TokenId
//

class MCS_PROTOCOL_3_TokenId;

class MCS_PROTOCOL_3_ArrayOf_TokenId : public PASN_Array
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_ArrayOf_TokenId, PASN_Array);
#endif
  public:
    MCS_PROTOCOL_3_ArrayOf_TokenId(unsigned tag = UniversalSet, TagClass tagClass = UniversalTagClass);

    PASN_Object * CreateObject() const;
    MCS_PROTOCOL_3_TokenId & operator[](PINDEX i) const;
    PObject * Clone() const;
};


//
// ArrayOf_UserId
//

class MCS_PROTOCOL_3_UserId;

class MCS_PROTOCOL_3_ArrayOf_UserId : public PASN_Array
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_ArrayOf_UserId, PASN_Array);
#endif
  public:
    MCS_PROTOCOL_3_ArrayOf_UserId(unsigned tag = UniversalSet, TagClass tagClass = UniversalTagClass);

    PASN_Object * CreateObject() const;
    MCS_PROTOCOL_3_UserId & operator[](PINDEX i) const;
    PObject * Clone() const;
};


//
// ExtendedParameters
//

class MCS_PROTOCOL_3_ExtendedParameters : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_ExtendedParameters, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_ExtendedParameters(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    PASN_Boolean m_unreliableDataSupported;
    PASN_Integer m_domainReferenceID;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// ExtendedParameterPropose
//

class MCS_PROTOCOL_3_ExtendedParameterPropose : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_ExtendedParameterPropose, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_ExtendedParameterPropose(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_ExtendedParameters m_targetExtendedParameters;
    MCS_PROTOCOL_3_ExtendedParameters m_minimumExtendedParameters;
    MCS_PROTOCOL_3_ExtendedParameters m_maximumExtendedParameters;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// ExtendedParameterAccept
//

class MCS_PROTOCOL_3_ExtendedParameterAccept : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_ExtendedParameterAccept, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_ExtendedParameterAccept(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_ExtendedParameters m_extendedParameters;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// PlumbDomainIndication
//

class MCS_PROTOCOL_3_PlumbDomainIndication : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_PlumbDomainIndication, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_PlumbDomainIndication(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    PASN_Integer m_heightLimit;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// ErectDomainRequest
//

class MCS_PROTOCOL_3_ErectDomainRequest : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_ErectDomainRequest, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_ErectDomainRequest(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    PASN_Integer m_subHeight;
    PASN_Integer m_subInterval;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// MergeChannelsRequest
//

class MCS_PROTOCOL_3_MergeChannelsRequest : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_MergeChannelsRequest, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_MergeChannelsRequest(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_ArrayOf_ChannelAttributes m_mergeChannels;
    MCS_PROTOCOL_3_ArrayOf_ChannelId m_purgeChannelIds;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// MergeChannelsConfirm
//

class MCS_PROTOCOL_3_MergeChannelsConfirm : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_MergeChannelsConfirm, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_MergeChannelsConfirm(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_ArrayOf_ChannelAttributes m_mergeChannels;
    MCS_PROTOCOL_3_ArrayOf_ChannelId m_purgeChannelIds;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// PurgeChannelsIndication
//

class MCS_PROTOCOL_3_PurgeChannelsIndication : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_PurgeChannelsIndication, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_PurgeChannelsIndication(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_ArrayOf_ChannelId m_detachChannelIds;
    MCS_PROTOCOL_3_ArrayOf_ChannelId m_purgeChannelIds;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// MergeTokensRequest
//

class MCS_PROTOCOL_3_MergeTokensRequest : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_MergeTokensRequest, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_MergeTokensRequest(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_ArrayOf_TokenAttributes m_mergeTokens;
    MCS_PROTOCOL_3_ArrayOf_TokenId m_purgeTokenIds;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// MergeTokensConfirm
//

class MCS_PROTOCOL_3_MergeTokensConfirm : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_MergeTokensConfirm, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_MergeTokensConfirm(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_ArrayOf_TokenAttributes m_mergeTokens;
    MCS_PROTOCOL_3_ArrayOf_TokenId m_purgeTokenIds;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// PurgeTokensIndication
//

class MCS_PROTOCOL_3_PurgeTokensIndication : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_PurgeTokensIndication, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_PurgeTokensIndication(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_ArrayOf_TokenId m_purgeTokenIds;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// DisconnectProviderUltimatum
//

class MCS_PROTOCOL_3_DisconnectProviderUltimatum : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_DisconnectProviderUltimatum, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_DisconnectProviderUltimatum(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_Reason m_reason;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// RejectMCSPDUUltimatum
//

class MCS_PROTOCOL_3_RejectMCSPDUUltimatum : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_RejectMCSPDUUltimatum, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_RejectMCSPDUUltimatum(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_Diagnostic m_diagnostic;
    PASN_OctetString m_initialOctets;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// AttachUserRequest
//

class MCS_PROTOCOL_3_AttachUserRequest : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_AttachUserRequest, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_AttachUserRequest(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// AttachUserConfirm
//

class MCS_PROTOCOL_3_AttachUserConfirm : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_AttachUserConfirm, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_AttachUserConfirm(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_initiator,
      e_nonStandard
    };

    MCS_PROTOCOL_3_Result m_result;
    MCS_PROTOCOL_3_UserId m_initiator;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// DetachUserRequest
//

class MCS_PROTOCOL_3_DetachUserRequest : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_DetachUserRequest, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_DetachUserRequest(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_Reason m_reason;
    MCS_PROTOCOL_3_ArrayOf_UserId m_userIds;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// DetachUserIndication
//

class MCS_PROTOCOL_3_DetachUserIndication : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_DetachUserIndication, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_DetachUserIndication(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_Reason m_reason;
    MCS_PROTOCOL_3_ArrayOf_UserId m_userIds;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// ChannelJoinRequest
//

class MCS_PROTOCOL_3_ChannelJoinRequest : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_ChannelJoinRequest, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_ChannelJoinRequest(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_UserId m_initiator;
    MCS_PROTOCOL_3_ChannelId m_channelId;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// ChannelJoinConfirm
//

class MCS_PROTOCOL_3_ChannelJoinConfirm : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_ChannelJoinConfirm, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_ChannelJoinConfirm(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_channelId,
      e_nonStandard
    };

    MCS_PROTOCOL_3_Result m_result;
    MCS_PROTOCOL_3_UserId m_initiator;
    MCS_PROTOCOL_3_ChannelId m_requested;
    MCS_PROTOCOL_3_ChannelId m_channelId;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// ChannelLeaveRequest
//

class MCS_PROTOCOL_3_ChannelLeaveRequest : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_ChannelLeaveRequest, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_ChannelLeaveRequest(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_ArrayOf_ChannelId m_channelIds;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// ChannelConveneRequest
//

class MCS_PROTOCOL_3_ChannelConveneRequest : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_ChannelConveneRequest, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_ChannelConveneRequest(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_UserId m_initiator;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// ChannelConveneConfirm
//

class MCS_PROTOCOL_3_ChannelConveneConfirm : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_ChannelConveneConfirm, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_ChannelConveneConfirm(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_channelId,
      e_nonStandard
    };

    MCS_PROTOCOL_3_Result m_result;
    MCS_PROTOCOL_3_UserId m_initiator;
    MCS_PROTOCOL_3_PrivateChannelId m_channelId;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// ChannelDisbandRequest
//

class MCS_PROTOCOL_3_ChannelDisbandRequest : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_ChannelDisbandRequest, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_ChannelDisbandRequest(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_UserId m_initiator;
    MCS_PROTOCOL_3_PrivateChannelId m_channelId;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// ChannelDisbandIndication
//

class MCS_PROTOCOL_3_ChannelDisbandIndication : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_ChannelDisbandIndication, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_ChannelDisbandIndication(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_PrivateChannelId m_channelId;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// ChannelAdmitRequest
//

class MCS_PROTOCOL_3_ChannelAdmitRequest : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_ChannelAdmitRequest, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_ChannelAdmitRequest(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_UserId m_initiator;
    MCS_PROTOCOL_3_PrivateChannelId m_channelId;
    MCS_PROTOCOL_3_ArrayOf_UserId m_userIds;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// ChannelAdmitIndication
//

class MCS_PROTOCOL_3_ChannelAdmitIndication : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_ChannelAdmitIndication, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_ChannelAdmitIndication(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_UserId m_initiator;
    MCS_PROTOCOL_3_PrivateChannelId m_channelId;
    MCS_PROTOCOL_3_ArrayOf_UserId m_userIds;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// ChannelExpelRequest
//

class MCS_PROTOCOL_3_ChannelExpelRequest : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_ChannelExpelRequest, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_ChannelExpelRequest(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_UserId m_initiator;
    MCS_PROTOCOL_3_PrivateChannelId m_channelId;
    MCS_PROTOCOL_3_ArrayOf_UserId m_userIds;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// ChannelExpelIndication
//

class MCS_PROTOCOL_3_ChannelExpelIndication : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_ChannelExpelIndication, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_ChannelExpelIndication(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_PrivateChannelId m_channelId;
    MCS_PROTOCOL_3_ArrayOf_UserId m_userIds;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// SendDataRequest
//

class MCS_PROTOCOL_3_SendDataRequest : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_SendDataRequest, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_SendDataRequest(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_domainReferenceID,
      e_totalDataSize,
      e_nonStandard
    };

    MCS_PROTOCOL_3_UserId m_initiator;
    MCS_PROTOCOL_3_ChannelId m_channelId;
    PASN_Boolean m_reliability;
    PASN_Integer m_domainReferenceID;
    MCS_PROTOCOL_3_DataPriority m_dataPriority;
    MCS_PROTOCOL_3_Segmentation m_segmentation;
    PASN_OctetString m_userData;
    PASN_Integer m_totalDataSize;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// SendDataIndication
//

class MCS_PROTOCOL_3_SendDataIndication : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_SendDataIndication, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_SendDataIndication(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_domainReferenceID,
      e_totalDataSize,
      e_nonStandard
    };

    MCS_PROTOCOL_3_UserId m_initiator;
    MCS_PROTOCOL_3_ChannelId m_channelId;
    PASN_Boolean m_reliability;
    PASN_Integer m_domainReferenceID;
    MCS_PROTOCOL_3_DataPriority m_dataPriority;
    MCS_PROTOCOL_3_Segmentation m_segmentation;
    PASN_OctetString m_userData;
    PASN_Integer m_totalDataSize;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// UniformSendDataRequest
//

class MCS_PROTOCOL_3_UniformSendDataRequest : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_UniformSendDataRequest, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_UniformSendDataRequest(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_domainReferenceID,
      e_totalDataSize,
      e_nonStandard
    };

    MCS_PROTOCOL_3_UserId m_initiator;
    MCS_PROTOCOL_3_ChannelId m_channelId;
    PASN_Boolean m_reliability;
    PASN_Integer m_domainReferenceID;
    MCS_PROTOCOL_3_DataPriority m_dataPriority;
    MCS_PROTOCOL_3_Segmentation m_segmentation;
    PASN_OctetString m_userData;
    PASN_Integer m_totalDataSize;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// UniformSendDataIndication
//

class MCS_PROTOCOL_3_UniformSendDataIndication : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_UniformSendDataIndication, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_UniformSendDataIndication(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_domainReferenceID,
      e_totalDataSize,
      e_nonStandard
    };

    MCS_PROTOCOL_3_UserId m_initiator;
    MCS_PROTOCOL_3_ChannelId m_channelId;
    PASN_Boolean m_reliability;
    PASN_Integer m_domainReferenceID;
    MCS_PROTOCOL_3_DataPriority m_dataPriority;
    MCS_PROTOCOL_3_Segmentation m_segmentation;
    PASN_OctetString m_userData;
    PASN_Integer m_totalDataSize;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// TokenGrabRequest
//

class MCS_PROTOCOL_3_TokenGrabRequest : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_TokenGrabRequest, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_TokenGrabRequest(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_UserId m_initiator;
    MCS_PROTOCOL_3_TokenId m_tokenId;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// TokenGrabConfirm
//

class MCS_PROTOCOL_3_TokenGrabConfirm : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_TokenGrabConfirm, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_TokenGrabConfirm(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_Result m_result;
    MCS_PROTOCOL_3_UserId m_initiator;
    MCS_PROTOCOL_3_TokenId m_tokenId;
    MCS_PROTOCOL_3_TokenStatus m_tokenStatus;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// TokenInhibitRequest
//

class MCS_PROTOCOL_3_TokenInhibitRequest : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_TokenInhibitRequest, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_TokenInhibitRequest(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_UserId m_initiator;
    MCS_PROTOCOL_3_TokenId m_tokenId;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// TokenInhibitConfirm
//

class MCS_PROTOCOL_3_TokenInhibitConfirm : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_TokenInhibitConfirm, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_TokenInhibitConfirm(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_Result m_result;
    MCS_PROTOCOL_3_UserId m_initiator;
    MCS_PROTOCOL_3_TokenId m_tokenId;
    MCS_PROTOCOL_3_TokenStatus m_tokenStatus;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// TokenGiveRequest
//

class MCS_PROTOCOL_3_TokenGiveRequest : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_TokenGiveRequest, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_TokenGiveRequest(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_UserId m_initiator;
    MCS_PROTOCOL_3_TokenId m_tokenId;
    MCS_PROTOCOL_3_UserId m_recipient;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// TokenGiveIndication
//

class MCS_PROTOCOL_3_TokenGiveIndication : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_TokenGiveIndication, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_TokenGiveIndication(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_UserId m_initiator;
    MCS_PROTOCOL_3_TokenId m_tokenId;
    MCS_PROTOCOL_3_UserId m_recipient;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// TokenGiveResponse
//

class MCS_PROTOCOL_3_TokenGiveResponse : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_TokenGiveResponse, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_TokenGiveResponse(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_Result m_result;
    MCS_PROTOCOL_3_UserId m_recipient;
    MCS_PROTOCOL_3_TokenId m_tokenId;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// TokenGiveConfirm
//

class MCS_PROTOCOL_3_TokenGiveConfirm : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_TokenGiveConfirm, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_TokenGiveConfirm(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_Result m_result;
    MCS_PROTOCOL_3_UserId m_initiator;
    MCS_PROTOCOL_3_TokenId m_tokenId;
    MCS_PROTOCOL_3_TokenStatus m_tokenStatus;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// TokenPleaseRequest
//

class MCS_PROTOCOL_3_TokenPleaseRequest : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_TokenPleaseRequest, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_TokenPleaseRequest(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_UserId m_initiator;
    MCS_PROTOCOL_3_TokenId m_tokenId;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// TokenPleaseIndication
//

class MCS_PROTOCOL_3_TokenPleaseIndication : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_TokenPleaseIndication, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_TokenPleaseIndication(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_UserId m_initiator;
    MCS_PROTOCOL_3_TokenId m_tokenId;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// TokenReleaseRequest
//

class MCS_PROTOCOL_3_TokenReleaseRequest : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_TokenReleaseRequest, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_TokenReleaseRequest(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_UserId m_initiator;
    MCS_PROTOCOL_3_TokenId m_tokenId;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// TokenReleaseConfirm
//

class MCS_PROTOCOL_3_TokenReleaseConfirm : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_TokenReleaseConfirm, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_TokenReleaseConfirm(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_Result m_result;
    MCS_PROTOCOL_3_UserId m_initiator;
    MCS_PROTOCOL_3_TokenId m_tokenId;
    MCS_PROTOCOL_3_TokenStatus m_tokenStatus;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// TokenTestRequest
//

class MCS_PROTOCOL_3_TokenTestRequest : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_TokenTestRequest, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_TokenTestRequest(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_UserId m_initiator;
    MCS_PROTOCOL_3_TokenId m_tokenId;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// TokenTestConfirm
//

class MCS_PROTOCOL_3_TokenTestConfirm : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_TokenTestConfirm, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_TokenTestConfirm(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_UserId m_initiator;
    MCS_PROTOCOL_3_TokenId m_tokenId;
    MCS_PROTOCOL_3_TokenStatus m_tokenStatus;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// RequestCapability
//

class MCS_PROTOCOL_3_RequestCapability : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_RequestCapability, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_RequestCapability(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_CapabilityID m_capabilityID;
    MCS_PROTOCOL_3_CapabilityClass m_capabilityClass;
    MCS_PROTOCOL_3_ParticipationIndicator m_participationIndicator;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// IndicationCapability
//

class MCS_PROTOCOL_3_IndicationCapability : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_IndicationCapability, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_IndicationCapability(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_CapabilityID m_capabilityID;
    MCS_PROTOCOL_3_CapabilityClass m_capabilityClass;
    PASN_Boolean m_summitProviderSupported;
    PASN_Boolean m_intermediateNodeSupported;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// CapabilitiesNotificationRequest
//

class MCS_PROTOCOL_3_CapabilitiesNotificationRequest : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_CapabilitiesNotificationRequest, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_CapabilitiesNotificationRequest(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_addList,
      e_removeList,
      e_nonStandard
    };

    PASN_Boolean m_v2NodePresent;
    MCS_PROTOCOL_3_SeqOfRequestCapabilities m_addList;
    MCS_PROTOCOL_3_SeqOfRequestCapabilities m_removeList;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// CapabilitiesNotificationIndication
//

class MCS_PROTOCOL_3_CapabilitiesNotificationIndication : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_CapabilitiesNotificationIndication, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_CapabilitiesNotificationIndication(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_addList,
      e_removeList,
      e_nonStandard
    };

    PASN_Boolean m_v2NodePresent;
    MCS_PROTOCOL_3_SeqOfIndicationCapabilities m_addList;
    MCS_PROTOCOL_3_SeqOfIndicationCapabilities m_removeList;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// ChannelAttributes_private
//

class MCS_PROTOCOL_3_ChannelAttributes_private : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_ChannelAttributes_private, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_ChannelAttributes_private(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    PASN_Boolean m_joined;
    MCS_PROTOCOL_3_PrivateChannelId m_channelId;
    MCS_PROTOCOL_3_UserId m_manager;
    MCS_PROTOCOL_3_ArrayOf_UserId m_admitted;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


//
// TokenAttributes_inhibited
//

class MCS_PROTOCOL_3_TokenAttributes_inhibited : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(MCS_PROTOCOL_3_TokenAttributes_inhibited, PASN_Sequence);
#endif
  public:
    MCS_PROTOCOL_3_TokenAttributes_inhibited(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nonStandard
    };

    MCS_PROTOCOL_3_TokenId m_tokenId;
    MCS_PROTOCOL_3_ArrayOf_UserId m_inhibitors;
    MCS_PROTOCOL_3_ArrayOf_NonStandardParameter m_nonStandard;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;
    PObject * Clone() const;
};


#endif // __MCS_PROTOCOL_3_H

#endif // if ! H323_DISABLE_MCS_PROTOCOL_3


// End of mcspduv3.h
