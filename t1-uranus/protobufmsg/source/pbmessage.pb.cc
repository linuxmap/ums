// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pbmessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pbmessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pbmsg {

namespace {

const ::google::protobuf::Descriptor* TMsgHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMsgHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMsgBody_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMsgBody_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPBMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPBMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pbmessage_2eproto() {
  protobuf_AddDesc_pbmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pbmessage.proto");
  GOOGLE_CHECK(file != NULL);
  TMsgHeader_descriptor_ = file->message_type(0);
  static const int TMsgHeader_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMsgHeader, msg_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMsgHeader, seq_id_),
  };
  TMsgHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TMsgHeader_descriptor_,
      TMsgHeader::default_instance_,
      TMsgHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMsgHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMsgHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TMsgHeader));
  TMsgBody_descriptor_ = file->message_type(1);
  static const int TMsgBody_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMsgBody, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMsgBody, content_),
  };
  TMsgBody_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TMsgBody_descriptor_,
      TMsgBody::default_instance_,
      TMsgBody_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMsgBody, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMsgBody, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TMsgBody));
  TPBMessage_descriptor_ = file->message_type(2);
  static const int TPBMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPBMessage, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPBMessage, body_),
  };
  TPBMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPBMessage_descriptor_,
      TPBMessage::default_instance_,
      TPBMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPBMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPBMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPBMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pbmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TMsgHeader_descriptor_, &TMsgHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TMsgBody_descriptor_, &TMsgBody::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPBMessage_descriptor_, &TPBMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pbmessage_2eproto() {
  delete TMsgHeader::default_instance_;
  delete TMsgHeader_reflection_;
  delete TMsgBody::default_instance_;
  delete TMsgBody_reflection_;
  delete TPBMessage::default_instance_;
  delete TPBMessage_reflection_;
}

void protobuf_AddDesc_pbmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017pbmessage.proto\022\005pbmsg\".\n\nTMsgHeader\022\020"
    "\n\010msg_name\030\001 \001(\t\022\016\n\006seq_id\030\002 \001(\r\")\n\010TMsg"
    "Body\022\014\n\004name\030\001 \001(\t\022\017\n\007content\030\002 \001(\014\"N\n\nT"
    "PBMessage\022!\n\006header\030\001 \001(\0132\021.pbmsg.TMsgHe"
    "ader\022\035\n\004body\030\002 \003(\0132\017.pbmsg.TMsgBody", 195);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pbmessage.proto", &protobuf_RegisterTypes);
  TMsgHeader::default_instance_ = new TMsgHeader();
  TMsgBody::default_instance_ = new TMsgBody();
  TPBMessage::default_instance_ = new TPBMessage();
  TMsgHeader::default_instance_->InitAsDefaultInstance();
  TMsgBody::default_instance_->InitAsDefaultInstance();
  TPBMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pbmessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pbmessage_2eproto {
  StaticDescriptorInitializer_pbmessage_2eproto() {
    protobuf_AddDesc_pbmessage_2eproto();
  }
} static_descriptor_initializer_pbmessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TMsgHeader::kMsgNameFieldNumber;
const int TMsgHeader::kSeqIdFieldNumber;
#endif  // !_MSC_VER

TMsgHeader::TMsgHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TMsgHeader::InitAsDefaultInstance() {
}

TMsgHeader::TMsgHeader(const TMsgHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TMsgHeader::SharedCtor() {
  _cached_size_ = 0;
  msg_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seq_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TMsgHeader::~TMsgHeader() {
  SharedDtor();
}

void TMsgHeader::SharedDtor() {
  if (msg_name_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_name_;
  }
  if (this != default_instance_) {
  }
}

void TMsgHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMsgHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMsgHeader_descriptor_;
}

const TMsgHeader& TMsgHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbmessage_2eproto();
  return *default_instance_;
}

TMsgHeader* TMsgHeader::default_instance_ = NULL;

TMsgHeader* TMsgHeader::New() const {
  return new TMsgHeader;
}

void TMsgHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg_name()) {
      if (msg_name_ != &::google::protobuf::internal::kEmptyString) {
        msg_name_->clear();
      }
    }
    seq_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TMsgHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg_name().data(), this->msg_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seq_id;
        break;
      }

      // optional uint32 seq_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_id_)));
          set_has_seq_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TMsgHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msg_name = 1;
  if (has_msg_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_name().data(), this->msg_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msg_name(), output);
  }

  // optional uint32 seq_id = 2;
  if (has_seq_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->seq_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TMsgHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msg_name = 1;
  if (has_msg_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_name().data(), this->msg_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg_name(), target);
  }

  // optional uint32 seq_id = 2;
  if (has_seq_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->seq_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TMsgHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msg_name = 1;
    if (has_msg_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_name());
    }

    // optional uint32 seq_id = 2;
    if (has_seq_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMsgHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TMsgHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TMsgHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TMsgHeader::MergeFrom(const TMsgHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_name()) {
      set_msg_name(from.msg_name());
    }
    if (from.has_seq_id()) {
      set_seq_id(from.seq_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TMsgHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMsgHeader::CopyFrom(const TMsgHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMsgHeader::IsInitialized() const {

  return true;
}

void TMsgHeader::Swap(TMsgHeader* other) {
  if (other != this) {
    std::swap(msg_name_, other->msg_name_);
    std::swap(seq_id_, other->seq_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TMsgHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMsgHeader_descriptor_;
  metadata.reflection = TMsgHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TMsgBody::kNameFieldNumber;
const int TMsgBody::kContentFieldNumber;
#endif  // !_MSC_VER

TMsgBody::TMsgBody()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TMsgBody::InitAsDefaultInstance() {
}

TMsgBody::TMsgBody(const TMsgBody& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TMsgBody::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TMsgBody::~TMsgBody() {
  SharedDtor();
}

void TMsgBody::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void TMsgBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMsgBody::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMsgBody_descriptor_;
}

const TMsgBody& TMsgBody::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbmessage_2eproto();
  return *default_instance_;
}

TMsgBody* TMsgBody::default_instance_ = NULL;

TMsgBody* TMsgBody::New() const {
  return new TMsgBody;
}

void TMsgBody::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TMsgBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional bytes content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TMsgBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional bytes content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TMsgBody::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bytes content = 2;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TMsgBody::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bytes content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMsgBody::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TMsgBody* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TMsgBody*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TMsgBody::MergeFrom(const TMsgBody& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TMsgBody::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMsgBody::CopyFrom(const TMsgBody& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMsgBody::IsInitialized() const {

  return true;
}

void TMsgBody::Swap(TMsgBody* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TMsgBody::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMsgBody_descriptor_;
  metadata.reflection = TMsgBody_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPBMessage::kHeaderFieldNumber;
const int TPBMessage::kBodyFieldNumber;
#endif  // !_MSC_VER

TPBMessage::TPBMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TPBMessage::InitAsDefaultInstance() {
  header_ = const_cast< ::pbmsg::TMsgHeader*>(&::pbmsg::TMsgHeader::default_instance());
}

TPBMessage::TPBMessage(const TPBMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TPBMessage::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPBMessage::~TPBMessage() {
  SharedDtor();
}

void TPBMessage::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void TPBMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPBMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPBMessage_descriptor_;
}

const TPBMessage& TPBMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbmessage_2eproto();
  return *default_instance_;
}

TPBMessage* TPBMessage::default_instance_ = NULL;

TPBMessage* TPBMessage::New() const {
  return new TPBMessage;
}

void TPBMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::pbmsg::TMsgHeader::Clear();
    }
  }
  body_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPBMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pbmsg.TMsgHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }

      // repeated .pbmsg.TMsgBody body = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_body;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TPBMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pbmsg.TMsgHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // repeated .pbmsg.TMsgBody body = 2;
  for (int i = 0; i < this->body_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->body(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TPBMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pbmsg.TMsgHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // repeated .pbmsg.TMsgBody body = 2;
  for (int i = 0; i < this->body_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->body(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TPBMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pbmsg.TMsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

  }
  // repeated .pbmsg.TMsgBody body = 2;
  total_size += 1 * this->body_size();
  for (int i = 0; i < this->body_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->body(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPBMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPBMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPBMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPBMessage::MergeFrom(const TPBMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  body_.MergeFrom(from.body_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::pbmsg::TMsgHeader::MergeFrom(from.header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPBMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPBMessage::CopyFrom(const TPBMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPBMessage::IsInitialized() const {

  return true;
}

void TPBMessage::Swap(TPBMessage* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    body_.Swap(&other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPBMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPBMessage_descriptor_;
  metadata.reflection = TPBMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pbmsg

// @@protoc_insertion_point(global_scope)
